+++
title = "CirC Bitwidth Adjustment Implementation"
[extra]
bio = """
  Collin Zhang and Melinda Fang are students at Cornell
"""
[[extra.authors]]
name = "Collin Zhang"
link = "https://collinzrj.github.io/"  # Links are optional.
[[extra.authors]]
name = "Melinda Fang"
+++

## Link to the project
We are currently working on creating a PR to include the change to the project. At this point, the best way to see the changes we have made is via this link which compares the latest commit with the commit before our changes https://github.com/collinzrj/circ/compare/a26533baadfd674f7d7d766b995a9a78a02d4ebd..61fb7c0ee2946cf84b92d962236ffe9533cb6c53

We mainly make changes to these files
```
## The new optimization pass is implemented in these two files
src/ir/opt/mod.rs
src/ir/opt/short_int_adj.rs
## The logic to handle non-adjust operations in the constraint generation system
src/target/r1cs/trans.rs
```

## Background
[CirC](https://github.com/circify/circ) is a compiler that compiles high level languages {C, ZoKrates, Circom} to (state-free, non-uniform, existentially quantified) circuits {SMT, ILP, R1CS, MPC} for SMT solver, zero-knowledge proof, multiparty computations, and more. To be more specific, it converts a program's source code into a set of mathematical constraints represented by vectors of variables. Optimization of such compilers primarily focus on reducing the size of the constraint system: having fewer constraints reduces the workload for creating proofs, and might also result in shorter proofs to verify. The typical formalism adopted by the majority of proof systems is rank-1 constraint system (R1CS). In an R1CS instance C, there exists a collection of constraints over a finite field F, often a prime p, or in other words, a circuit of additions and multiplications gates mod p. One significant cost of such system is introduced by arithmetic operations. Assume an underlying prime number p and operations such as multiplication done over pâ€², to obtain a correct result, a remainder operation is always applied on the result to adjust bitwidth and avoid overflow, which leads to a number of constraints that are at least equal to the bitwidth of the result, as it requires at least one split gate. Our project aims to apply a heuristic approach to optimize the translation of arithmetic operations. 

## Design
Our optimization mainly focuses on addition and multiplication, which would typically increase the bitwidth of resulting element by 1 or double the bitwidth, respectively. We classify elements into two types
- Elements that could be above the range and required to be returned within range: this includes program output, elements involved in bitwise operations and comparisons, operations like division or remainder, elements involved in memory operations, and so on.
- Elements that could be above the range but are not required to be within range: This includes intermediate elements that undergoes multiplication and addition operations and does not meet any of the criterions above.

The current system represents basic elements as bitvectors, and is designed to adjust their bitwidth after each arithmetic operation. Based on the classification of the elements above, our projects reduces the number of constraints in the system by greedily deciding when to adjust bitwidth for elements falls under the second category while ensuring no overflows can happen in later operations involving the elements. Or in other words, adjustments are only introduced if the next operation is going to result in an overflow.

Take this short program as an example:
```
def main(u32 a, u32 b) -> u32:
    u32 c = a + b
    u32 d = a + c
    return c * d
```

The old compiler would adjust immediately at `a+b`, `a+c` and `c * d`. By applying our optimization, the system would treat c and d as intermediate elements and only adjust at c*d, since it is producing the final program output. 
Without our optimization, the cost spent on adjusting the bitwidth will be: 33 constraint to adjust `a + b` and `a + c` respectively, and 64 to adjust `c * d`, which result in 130 constraints in total.
In contrast, after our optimization, the cost spent on adjusting `a + b` and `a + c` would be 0, and 66 to adjust `c * d`, which result in 66 constraints in total. 

## Implementation
1. We create a new type of operations: `add_unadjust` and `mul_unadjust` for addition and multiplication to notify the constraint generation system not to adjust the bitwidth.
2. We implemented two passes to rewrite the operations. First pass is to classify elements in the system. We implemented an initial pass to scan the entire program and store elements requiring adjustments in a set S. Whenever we encounter an operation that definitely requires adjustment, we add the elements used in the operation to S. Then we implemented a rewrite pass to rewrite operations done on bitvectors not included in D to our newly introduced unadjust operation. 
3. We have also made changes to the constraint generation system to take advantage of the two new operations. In the original implementation, the constraint generation system will always adjust the bitwidth of the result of an operation. We have made changes to the system to not adjust `add_unadjust` and `mul_unadjust` operations. We also proved that such change will not impact the correctness of the system.

## What were the hardest parts to get right
The hardest part is to make sure the compiler works properly using our newly introduced operation. We encounter many bugs while implementing the optimization. For instance, before since the author always adjust the bitwidth after all types of operations, the bitwidth is fixed. However, now since an operation might be using unadjusted bitwidth the logic of calculating the bitwidth of the current element is more complicated and requires more steps to ensure an operation does not overflow.

## Empirical evaluation
We uses two types of tests. 
1. We use the existing benchmarks in the circ repo to test whether the output of the optimized compiler is correct. Our implementation passed all the test cases in CirC.
2. To measure how well the proposed design improves the system, we use the number of r1cs constraints generated as the metrics. We runs our compiler and the original one over a set of zokrates programs in [CirC](https://github.com/circify/circ) and [Zombie](https://github.com/PepperSieve/Zombie/tree/master) and compares the number of constraints generated. Here is a shorted list of tests we run. The first line are the numbers of constraints with our flexible adjustment implementation and the second line is the result using original compiler.
```
../Zombie/circ/zkmb/shaRound.zok
with optimization:    27137
without optimization: 29057
../Zombie/circ/zkmb/DotChaChaAmortized_Isolated.zok
with optimization:    23366
without optimization: 41835
../Zombie/circ/zkmb/DotChaChaAmortized.zok
with optimization:    111529
without optimization: 130232
../Zombie/circ/zkmb/tls_key_schedules/HKDF.zok
with optimization:    101304
without optimization: 109187
../Zombie/circ/zkmb/SHA.zok
with optimization:    26581
without optimization: 28505
../Zombie/circ/zkmb/DotChaChaAmortizedUnpack.zok
with optimization:    31422
without optimization: 50105
```

## How to run the code
To run the r1cs compiler, first clone the repo, and checkout our branch
```
git clone https://github.com/collinzrj/circ
git checkout bitwidth_adjustment
```
then `cd` into it,
then run this command to build circ
`cargo build --release --features r1cs,smt,zok,bellman --example circ`
For proving and verifying you also need to build zk
`cargo build --release --features r1cs,smt,zok,bellman --example zk`
You can find them built in `./target/release/examples/zk` and `./target/release/examples/circ`

Then you could pass a .zok file to circ and convert it into linear constraints. For instance this command counts the number of constraints produced by using our short integer adjustment optimization.
`./target/release/examples/circ <path to .zok file> --short-int-adj r1cs --action count`

Here is an example function in srcipt file to generate proof and verify them
```
MODE=release # debug or release
BIN=./target/$MODE/examples/circ
ZK_BIN=./target/$MODE/examples/zk

function pf_test {
    for proof_impl in groth16
    do
        ex_name=$1
        $BIN <path to .zok file> r1cs --action setup --proof-impl $proof_impl
        $ZK_BIN --inputs  <path to .zok file>.pin --action prove --proof-impl $proof_impl
        $ZK_BIN --inputs <path to .zok file>.vin --action verify --proof-impl $proof_impl
        rm -rf P V pi
    done
}
```

For more commands please check out our [test script](https://github.com/collinzrj/circ/blob/61fb7c0ee2946cf84b92d962236ffe9533cb6c53/scripts/short_int_adj_test.zsh)
